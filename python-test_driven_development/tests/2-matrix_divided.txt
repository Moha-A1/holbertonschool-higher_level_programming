# ----- Function import -----
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# ----- Basic matrix division -----
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided([[1, 2], [3, 4]], 2)
[[0.5, 1.0], [1.5, 2.0]]

# ----- Single element matrix -----
>>> matrix_divided([[5]], 2)
[[2.5]]

# ----- Float division -----
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2.5)
[[0.6, 1.0], [1.4, 1.8]]

# ----- Negative numbers -----
>>> matrix_divided([[1, -2], [3, -4]], -2)
[[-0.5, 1.0], [-1.5, 2.0]]

# ----- Error cases -----
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2], [3, "4"]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2], [3, 4]], "not a number")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

# ----- Additional error cases -----
>>> matrix_divided([], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3]])
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
